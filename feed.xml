<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Van Le — Software developer</title>
    <description>London-based full-stack software developer, happiest writing Ruby or JavaScript</description>
    <link>http://vann.io/</link>
    <atom:link href="http://vann.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 29 Jan 2017 18:13:50 +0000</pubDate>
    <lastBuildDate>Sun, 29 Jan 2017 18:13:50 +0000</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>Week 12 &amp;mdash; Makers Mirror / SMRT mk II</title>
        <description>&lt;p&gt;Remember &lt;a href=&quot;/posts/projects/2016/01/03/smrt.html&quot; target=&quot;_blank&quot;&gt;this old thing&lt;/a&gt;? As a final group project, we rebuilt my botched attempt at a smart mirror, &lt;em&gt;with actual test-driven development&lt;/em&gt; this time round.&lt;/p&gt;

&lt;p&gt;The idea is that the mirror is a self-contained product, capable of running a server on itself and displaying an interface with widgets. A user would connect the mirror to their wifi network and configure the widgets externally from a phone or computer on the same network, similar to the configuration of a router.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/smrt-dash-2.png&quot; /&gt;
&lt;figcaption&gt;&lt;strong&gt;Left&lt;/strong&gt; mirror interface &amp;mdash; &lt;strong&gt;Right&lt;/strong&gt; personalisation dashboard&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The personalisation dashboard has a grid that represents the available positions of a widget on the interface. In the example below, the clock widget would appear in the top left corner of the mirror interface. The widget blocks can be toggled on/off and moved around by dragging and dropping into position on the grid.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/smrt-dash.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;One of the challenges was to somehow get the mirror interface to update itself when a user changed the dashboard settings, as there aren’t any touch-screen capabilities (but think of the smudges if there were, &lt;em&gt;shudder&lt;/em&gt;). As the settings were saved to disk in a &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file, I used BrowserSync to listen to changes on that particular file, then force a refresh of the mirror interface without user intervention. Voilá, a self-updating smart mirror.&lt;/p&gt;

&lt;p&gt;We also experimented with using a LeapMotion sensor to put the mirror to sleep and wake it up with a swipe gesture, as well as some more advanced widgets like radio alarms that could be snoozed with a different gesture.&lt;/p&gt;

&lt;p&gt;Watch the video of the project in progress. Just a warning, there’s a cringeworthy amount of my face in it. &lt;sup&gt;I did not make the video&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;yt&quot;&gt;
  &lt;iframe class=&quot;yt&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/OYk-d6q4iWI?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/08/07/smrt-mk2.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/08/07/smrt-mk2.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 9 &amp;mdash; Sockets galore</title>
        <description>&lt;p&gt;I have no idea what happened to the time after week 6, but it has flown by! In that time, I’ve built a web framework (move aside Express), a convincing clone of Instagram &lt;em&gt;with&lt;/em&gt; photo filters, and even a multiplayer game.&lt;/p&gt;

&lt;p&gt;One of my favourite group projects has definitely been the multiplayer game. The coaches set a theme of ‘useful tools for developers’, and out of that, &lt;s&gt;Battletoads&lt;/s&gt; BattleCodes was born. It’s a happy mix between CodeWars (improve coding skills by completing challenges) and typeracer (race to type the fastest), where players race in real-time to complete code challenges before their opponents.&lt;/p&gt;

&lt;p&gt;The reason I enjoyed this so much was because its a &lt;em&gt;game&lt;/em&gt; (yay fun), and because there was the challenge of getting real-time, low-latency responses. HTTP relies on a client sending a request, and &lt;em&gt;then&lt;/em&gt; the server responding. In a game where speed is crucial, that just won’t cut the mustard. With websockets, there’s a persistent connection between the client and the server which allows data to be sent and received immediately.&lt;/p&gt;

&lt;p&gt;Find the project &lt;a href=&quot;https://github.com/vannio/battlecodes&quot; target=&quot;_blank&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/07/25/sockets-galore.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/07/25/sockets-galore.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 6 — Project week 1.0</title>
        <description>&lt;p&gt;In groups of 4, we were tasked to build an app ‘inspired’ by Airbnb by the end of the week. I was grouped with the class clowns which made for a pretty entertaining week! On our first day, we wrote our own user stories from the specifications, and spent a long time diagramming, deciding how all our models were going to interact with each other and how our database tables should be structured.&lt;/p&gt;

&lt;p&gt;We were pretty ambitious and wanted to use this opportunity to try a new stack, specifically using Node.js. After some research, we settled with Express as our web framework, Sequelize as our object relational mapper and Mocha as our test suite. We quickly came to the realisation that picking up so many new technologies at once was overwhelming. Since Node operates so heavily on asynchrony, we were left with a messy time trying to feature test our models, particularly because not everyone was comfortable coding in JavaScript in the first place. On Wednesday morning, in the interest of having a decent minimum viable product by the end of the week, we all swallowed our pride and decided to re-write the app in Ruby. We agreed that it was more important to allow everyone the chance to get involved with the coding and make a fair contribution, as well as keeping our sanity and well-being in check.&lt;/p&gt;

&lt;p&gt;It’s probably been my most fun week so far and I wouldn’t have done it any other way. This process has shown me the importance of listening to everyone on the team, putting the needs of the ‘client’ specification ahead of our own need to try something new and shiny, as well as &lt;em&gt;learning to walk before learning to run&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I ended up re-writing my &lt;a href=&quot;http://rock-paper-sizzle.herokuapp.com&quot;&gt;Rock Paper Scissors game&lt;/a&gt; with Node and Express in my spare time, so I managed to successfully use this newfangled technology after all. Not only that, in my search for new tech to try, I stumbled across a bug in some open source software that I wasn’t too scared to make a pull request for! I fixed a bug, yay.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/07/03/week-6.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/07/03/week-6.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 5 — JavaScript week</title>
        <description>&lt;p&gt;I used a lot of JavaScript in my last job, but because I learnt most of it by copying and pasting things I found on Google, I picked up some pretty bad habits (so many global functions, yay). This week has been a revelation — I finally understand how to use prototypes and constructors to better structure my code. It’s been quite the challenge to unlearn what I thought I knew, but I’m a lot happier thinking about JavaScript in a more object-orientated way.&lt;/p&gt;

&lt;p&gt;This has also been the graduation week for the seniors. They’ve been working hard to build and present their fully-functional apps. They all used entirely new technologies and frameworks that aren’t in the curriculum, so I’m amazed at how much new learning happened in so little time.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/railsgirls-june16.jpg&quot; alt=&quot;Rails Girls, June 2016&quot; /&gt;
&lt;figcaption&gt;Who is that awkward smiley person on the far-right?&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Instead of doing the weekend challenge, I spent my Saturday volunteer-coaching at Rails Girls, a 1.5 day workshop to get badass women coding and building their first web-app using Ruby on Rails (RoR). 200 coaches and coachees turned up!&lt;/p&gt;

&lt;p&gt;This time last year, I attended Rails Girls as a student (I hadn’t touched Ruby &lt;em&gt;or&lt;/em&gt; RoR before), and have since paid it forward by coaching at each subsequent event. I still haven’t had much experience with RoR, but my understanding of MVC patterns, Ruby and CSS was more than enough. I spent a bit too long celebrating with the seniors on Friday, so I was running on 3-4 hours of sleep. I still had a great time and really think I got my coachee excited about code.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/06/26/week-5.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/06/26/week-5.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 4 — Chitter, not Twitter</title>
        <description>&lt;p&gt;This week’s focus has been object-relational databases and using one to build a CRUDdy bookmark manager — *&lt;em&gt;shock horror, audience faints&lt;/em&gt;*. Just to be clear, CRUD stands for Create Read Update Delete, and is not a pet name for my fury at databases. In fact, I’ve really enjoyed experimenting with them. I have dabbled in some MongoDB in the past but since join tables don’t seem to be a thing, I found myself iterating over large collections of data quite often. This doesn’t seem to be much of an issue with Postgres. I learnt &lt;em&gt;so much&lt;/em&gt; about SQL statements and I’m pretty confident in my ability to manipulate databases from the command line.&lt;/p&gt;

&lt;p&gt;The weekend challenge was pretty much a re-hash of the bookmark manager, but I pushed myself to complete as much as I could without checking the walkthrough. Here’s the final product — &lt;a href=&quot;http://chitter-not-twitter.herokuapp.com&quot; target=&quot;_blank&quot;&gt;a not-as-good clone of Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;http://chitter-not-twitter.herokuapp.com&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/assets/chitter.png&quot; alt=&quot;Chitter, not Twitter&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Chitter, not Twitter&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Despite a few attempts to break the app by embedding HTML in the comments, I think it still looks and works pretty well. In typical Van-style, I made it 92% more goofy by seeding the database with infamous Jaden Smith/Ed Balls Twitter quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vannio/challenge-chitter/tree/bonus&quot; target=&quot;_blank&quot;&gt;My code&lt;/a&gt; was collaboratively reviewed on a big screen by the rest of the cohort. I’ve always worried about sharing my code because I feel like there’s this weird pressure for me to write “good code” because I “have experience”. I wouldn’t be here if I thought I could write exceptional code! I hate doing anything in front of big groups of people too, so I was understandably nervous (palms sweaty, mom’s spaghetti). I actually got some really helpful feedback and suggestions that I would never have otherwise considered, so in the nicest way possible, I urge anyone who is hesitant to show their code to get over themselves and just do it. To get the most out of this course, you really need to get out of your comfort zone!&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jun 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/06/17/week-4.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/06/17/week-4.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 3 — Rock, Paper, Scissors</title>
        <description>&lt;p&gt;This week has been &lt;em&gt;on point&lt;/em&gt;. We’ve moved from programs that only live on the command line to making web applications, hooray! It’s unbelievably satisfying building something concrete to show to my non-coding friends, rather than some strange, abstract Ruby thing that requires decent knowledge of the command line and &lt;code class=&quot;highlighter-rouge&quot;&gt;irb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The weekend challenge was to create a fully test-driven, neatly encapsulated, object-orientated game of Rock, Paper, Scissors. Once I got the bare-bones functioning game with all the unit and feature tests down, I was in my element as a front-end developer, making it &lt;em&gt;look&lt;/em&gt; cool. I started off with an embarrassing storyboard drawing:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/rock-paper-sizzle.jpg&quot; alt=&quot;attempt at storyboarding&quot; /&gt;
&lt;figcaption&gt;Can you believe I got an A* in GCSE Art? &amp;#x1F3A8;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I wanted a short time-lapse animation of the hands gesturing for each move, so I roped in my boyfriend for a couple of hours to help me take and edit a bunch of photos.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;figure&gt;
&lt;img src=&quot;/assets/rock-paper-open.png&quot; alt=&quot;Example spritesheet&quot; class=&quot;xl&quot; /&gt;
&lt;/figure&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The animations work by sliding a spritesheet, one frame at a time, through a narrow container — like a film reel projector.&lt;/p&gt;

&lt;p&gt;I had a lot of fun with this challenge. It was pretty much complete by the end of Saturday, so I spent the evening tidying my code with G&amp;amp;Ts in hand. I had friends over, but they didn’t seem to mind me working, luckily!&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;http://rock-paper-sizzle.herokuapp.com&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;/assets/rock-paper-sizzle-2.jpg&quot; alt=&quot;final game&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Voilà &amp;mdash; &lt;a href=&quot;http://rock-paper-sizzle.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Rock, Paper, Sizzle&lt;/a&gt;!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And &lt;a href=&quot;http://rock-paper-sizzle.herokuapp.com&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; is the finished product. It’s hosted on a free Heroku package, which means it takes a while to wake up if it hasn’t been viewed for a while. Be patient!&lt;/p&gt;

&lt;p&gt;As for the silly player 2 names… Well, what is code without a little bit of whimsy?&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jun 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/06/12/week-3.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/06/12/week-3.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 2</title>
        <description>&lt;p&gt;It feels like I’m only just getting the hang of things, but I’m already 2 weeks into the course. Nooooo!&lt;/p&gt;

&lt;p&gt;I had my first code review at Makers on Tuesday, reflecting on last week’s weekend challenge (create an airport program to control incoming and outgoing flights). I wish I had attempted the challenge without reading the submission guide first. I probably would have made loads of unexpected mistakes and code smells (that’s a &lt;em&gt;thing&lt;/em&gt;, lolol), but at least I’d be able to see where I was going wrong and learn never to make the same mistakes. My pair clearly hadn’t seen it and really tested the boundaries with some alien ‘null object pattern’ stuff.&lt;/p&gt;

&lt;p&gt;The workshops this week have mostly been looking at design patterns: abstract vs concrete, delegating responsibilities, and composition over inheritance. Duck typing is something else that came up this week — as a weakly-typed language, Ruby only cares about what an object responds to, not how it looks. If an object can quack and can swim, it can be considered a duck!&lt;/p&gt;

&lt;p&gt;Delegating responsibilities to other classes absolutely makes sense, yet I struggled actually implementing it during this week’s &lt;a href=&quot;https://github.com/vannio/challenge-takeaway&quot; target=&quot;_blank&quot;&gt;weekend challenge&lt;/a&gt; (create a takeaway/restaurant program to take orders) because I wasn’t really sure how to write &lt;em&gt;meaningful&lt;/em&gt; tests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@basket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_basket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@basket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Takeaway&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_to_basket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_basket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m still unsure of how I go about testing &lt;code class=&quot;highlighter-rouge&quot;&gt;add_to_basket&lt;/code&gt; without it being a vacuous test that only checks for a response, and without it relying on &lt;code class=&quot;highlighter-rouge&quot;&gt;update_basket&lt;/code&gt; working correctly.
&lt;br /&gt;¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;The rest of the week has been a blur. I definitely can’t keep up with this blogging business, so this entry is going to be short and sweet (like me, ha). So much stuff is crammed into each day, so unless I note down what’s happened &lt;em&gt;on that same day&lt;/em&gt;, I’ve already forgotten what I’ve accomplished by the next morning. I know it’s a lot though!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 20:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/06/05/week-2.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/06/05/week-2.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Week 1</title>
        <description>&lt;p&gt;First week of Makers is officially done! I’ve been keeping some incoherent, but shortish thoughts for each day:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mon&lt;/strong&gt;&lt;br /&gt;
I’m in Maker’s biggest cohort, ever. That’s a lotta names and faces to remember.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/samm-dayone.jpg&quot; alt=&quot;Makers Academy first day&quot; /&gt;
&lt;figcaption&gt;Sorry for the blurry photo &amp;mdash; Sam is very animated&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Had a few talks introducing ideologies like extreme programming, and generally what we’re expected to learn. Surprisingly, it’s not really about the code. They want us to walk away with, at the bare minimum, the right behaviours and attitudes as a developer. There was also emphasis on getting physical exercise to tire our bodies out, otherwise we may have difficulty getting a good amount of rest.&lt;/p&gt;

&lt;p&gt;The day (dare I say?) could have been better planned and timed — only because we had an overly long lunch break and the day ended at half 4. I don’t mind &lt;em&gt;too&lt;/em&gt; much at this point, but I didn’t pay thousands to sit around twiddling my thumbs. They took us to the pub afterwards though, so I can’t complain too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tue&lt;/strong&gt;&lt;br /&gt;
I slept for THREE HOURS — I should have heeded their warning about lack of exercise.&lt;/p&gt;

&lt;p&gt;Got assigned Captain Code as my pair partner. Who is Captain Code? He is the lorem ipsum of people and only exists because there’s an odd number of students in the cohort. I ended up joining an existing pair and three-way-paired instead, creating a third role as the backseat-driver/passenger. We struggled with instance variables, something I didn’t think I would ever have trouble with. I like that I got stuck though, because it forced me to play with something I thought I knew, in a different context.&lt;/p&gt;

&lt;p&gt;Also had a presentation about diversity (specifically women). Not trying to be dismissive, but it wasn’t anything I wasn’t already aware of. I once went to a JavaScript WebGL meetup — I was so excited to learn more about Three.js, but I was &lt;em&gt;one of two&lt;/em&gt; women, and felt blindingly aware that I couldn’t join the ‘lad banter’ around the pizza and beer table when I arrived. It’s unreal how the food and drink served, but mostly the brogrammer atmosphere it created, put me off ever returning to similar meetups.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wed&lt;/strong&gt;&lt;br /&gt;
Had a workshop about classes! The main point of them is that they encapsulate behaviours. At my previous workplace, I attempted to keep my JavaScript similarly modular, but it’s so much nicer to do in Ruby. Ruby is the bomb. Workshops are equally awesome. They’re structured as a quick presentation and demonstration, followed by a paired 20-30min exercise, and then a group discussion for feedback.&lt;/p&gt;

&lt;p&gt;I also feel like I’m getting better at pairing. I find I’m owning my decisions, becoming more assertive and sure of myself whilst navigating. This week’s aim is to practice more TDD (test-driven development). I’m having trouble getting into the habit of writing extensive tests before writing code though. It just feels a lot more natural to jump right into code when I know exactly what needs to be written.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thurs&lt;/strong&gt;&lt;br /&gt;
I practiced my explanation skills quite a bit today. I just need to ensure I’m using the right terminology and not just pointing to code and referring to it as the ‘thing’.&lt;/p&gt;

&lt;p&gt;Had another workshop, this time about debugging code. The main takeaways are to ‘tighten the loop’, then ‘get visibility’. How I have tended to do it in JavaScript is to locate the line of the error from the console (tightening the loop), then using &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; around the offending lines (getting visibility). It’s good to know I was on the right track and haven’t spent 2 years debugging like an idiot.&lt;/p&gt;

&lt;p&gt;Tuesday and Thursday are yoga days, which I took part in today. I forgot my sun salutation routine but it didn’t seem to matter as the practice is very open and flexible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fri&lt;/strong&gt;&lt;br /&gt;
Today’s workshop was on doubles in RSpec, and deciding whether or not to mock behaviour using box and arrow diagrams. I am still confused and think I need to spend more time with Sandi Metz (or at least her POODR).&lt;/p&gt;

&lt;p&gt;Every Friday we also have a confidence workshop and a retrospective. These are to gauge how confident we feel with certain topics. In groups of four, we discuss and explain it to each other before submitting a survey on how we feel post-discussion.&lt;/p&gt;

&lt;p&gt;By 5:30pm I had had enough, so played Cards Against Humanity and ping-pong to wind down the week.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 18:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/05/28/week-1.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/05/28/week-1.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Precourse week 4 &amp;mdash; POODR and chill</title>
        <description>&lt;p&gt;The precourse is officially over! Week 4 work wasn’t nearly as intense, so I had time to start reading through the &lt;em&gt;Well Grounded Rubyist&lt;/em&gt; and flick through &lt;em&gt;POODR&lt;/em&gt; (Practical Object-Oriented Design in Ruby) — the two most recommended books for the course. I also picked up a dinky little O’Reilly Ruby pocket guide, because who has the shoulder strength to carry heavy books &lt;em&gt;and&lt;/em&gt; their laptop everyday?&lt;/p&gt;

&lt;p&gt;I did my first proper pairing exercise earlier on in the week. Me and &lt;a href=&quot;https://github.com/andreamazza89&quot; target=&quot;_blank&quot;&gt;Andrea&lt;/a&gt; completed a couple of katas and the fizzbuzz challenge over Screenhero — a program that shares one screen with another user. One person ‘navigates’ (directs) whilst the other ‘drives’ (types) the code-writing. I actually really like paired-programming and wish it was a practice I had picked up earlier. Not only is it faster for solving problems, but staring at code all day can get lonely, so being able to ask silly questions to a real person &lt;em&gt;is just so nice&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2016 21:00:00 +0100</pubDate>
        <link>http://vann.io/posts/general/2016/05/22/poodr-n-chill.html</link>
        <guid isPermaLink="true">http://vann.io/posts/general/2016/05/22/poodr-n-chill.html</guid>
        
        <category>makers</category>
        
        
        <category>posts</category>
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Using tags in Jekyll</title>
        <description>&lt;p&gt;Taking a sidestep from fizzbuzzing and &lt;a href=&quot;https://github.com/vannio/fizzbuzz-1/blob/master/lib/fizzbuzz.rb#L24&quot; target=&quot;_blank&quot;&gt;playing with Giphy APIs&lt;/a&gt;, I thought I’d implement tag index pages properly on this blog (without any plugins). My Makers Academy related posts keep being muddied up with unrelated posts, and I needed a way to filter them out.&lt;/p&gt;

&lt;p&gt;If you’re unfamiliar with Jekyll, it’s a static site generator. You can type up some basic &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; files as blog posts and Jekyll generates the HTML for a fully functioning website. It has a templating engine built-in, which keeps the code DRY (don’t repeat yourself) by using templates that swap in variables and partials. It can even fill out templates with JSON/YAML data. I won’t go into detail about how to get started as it’s all in the documentation, although I did attempt to create a &lt;a href=&quot;https://github.com/vannio/Jekyll-babel-starter&quot; target=&quot;_blank&quot;&gt;boilerplate of sorts&lt;/a&gt; that aims to take the difficulty out of Jekyll by letting Gulp.js automate a lot of stuff.&lt;/p&gt;

&lt;p&gt;Whilst categories work fine, tags aren’t really ‘supported’ in Jekyll. The documentation tells you how to tag your posts, but then you’re left to scratch your head in confusion from that point onwards.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;Using tags in Jekyll&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2016-05-19 10:00:00 +0100&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;general&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Here we go, tags!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this is how&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;I do&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# The rest of blog post content goes down here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s an example of the YAML Front Matter block for a blog post. The tags are &lt;code class=&quot;highlighter-rouge&quot;&gt;this is how&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;I do&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;, just as expected. It’s a pain but you’ll need to manually create a page for every tag you have. For my tag &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; (really useful name), I’d create an &lt;code class=&quot;highlighter-rouge&quot;&gt;it.html&lt;/code&gt; page with this snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Loop through all the posts tagged &#39;it&#39;&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for post in site.tags.it %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Print the title of each post&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Loop through all the tags this post is tagged as&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and print the name of each tag&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for tag in post.tags %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;br&amp;gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endfor %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endfor %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming I only have one sad post tagged &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;, the html generated would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;title: Using tags in Jekyll
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;tag: this is how
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;tag: I do
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;tag: it&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s pretty much it! I’d then go ahead and fill out &lt;code class=&quot;highlighter-rouge&quot;&gt;it.html&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post.content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; or link the title to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post.url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re still confused, have a look at &lt;a href=&quot;https://github.com/vannio/vann.io&quot; target=&quot;_blank&quot;&gt;the repo for this blog&lt;/a&gt;. I always find that I need to be able to explore how something is structured before I really understand what’s going on.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 May 2016 10:00:00 +0100</pubDate>
        <link>http://vann.io/posts/tutorials/2016/05/19/tagging.html</link>
        <guid isPermaLink="true">http://vann.io/posts/tutorials/2016/05/19/tagging.html</guid>
        
        <category>tutorials</category>
        
        
        <category>posts</category>
        
        <category>tutorials</category>
        
      </item>
    
  </channel>
</rss>
